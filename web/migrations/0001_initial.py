# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-04-10 07:34
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_resized.forms
import web.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='user',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('address', models.CharField(blank=True, max_length=255)),
                ('mobile_number', models.CharField(blank=True, max_length=255, validators=[django.core.validators.RegexValidator('^[0-9+]*$', 'Must be numbers only')])),
                ('location', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile_type', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', web.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Blueprint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Blueprint Name')),
                ('name_slug', models.SlugField(blank=True, max_length=255, unique=True, verbose_name='Blueprint Name Slug')),
                ('description', models.TextField(blank=True, verbose_name='Blueprint Description')),
                ('url', models.CharField(blank=True, max_length=255, verbose_name='Blueprint Url')),
                ('function', models.CharField(max_length=255, verbose_name='Job Function')),
                ('professional_qualifications', models.CharField(max_length=255, verbose_name='Professional Qualifications')),
                ('team_id', models.CharField(max_length=255, verbose_name='Team ID')),
                ('practice_limit', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated_At')),
                ('is_published', models.BooleanField(default=False, verbose_name='Blueprint Published')),
                ('remote_work', models.CharField(max_length=255, verbose_name='Remote Work')),
                ('max_queue', models.IntegerField(default=10, verbose_name='Max Queue')),
                ('company_name', models.CharField(max_length=255, verbose_name='Company Name')),
                ('work_enviorment', models.ImageField(upload_to='img/work-enviorment/')),
            ],
            options={
                'verbose_name': 'Blueprint',
                'verbose_name_plural': 'Blueprints',
            },
        ),
        migrations.CreateModel(
            name='BlueprintTasks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Task Name')),
                ('function', models.CharField(max_length=255, verbose_name='Job Function')),
                ('tast_status', models.CharField(blank=True, choices=[('Active', 'Active'), ('Finished', 'Finished'), ('Canceled', 'Canceled'), ('Prolonged', 'Prolonged')], max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated_At')),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
            },
        ),
        migrations.CreateModel(
            name='CompanyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('types_of_company', models.CharField(choices=[('StartUp', 'StartUp'), ('National', 'National'), ('MNCs', 'MNCs')], max_length=100)),
            ],
            options={
                'verbose_name': 'Company Type',
            },
        ),
        migrations.CreateModel(
            name='DesiredEmployee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=255, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=255, verbose_name='Last Name')),
                ('email', models.CharField(max_length=255, unique=True, verbose_name='Email Address')),
                ('phone_number', models.CharField(max_length=255, verbose_name='Phone Number')),
            ],
            options={
                'verbose_name': 'Desired Employee',
            },
        ),
        migrations.CreateModel(
            name='ExperienceLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experience_level', models.CharField(choices=[('Fresher', 'Fresher'), ('Intern', 'Intern'), ('Experienced', 'Experienced'), ('Trainee', 'Trainee')], max_length=255)),
            ],
            options={
                'verbose_name': 'Experience Level',
            },
        ),
        migrations.CreateModel(
            name='Help',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Help')),
                ('description', models.CharField(max_length=255, verbose_name='Description')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Help',
            },
        ),
        migrations.CreateModel(
            name='Industry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_industry', models.CharField(choices=[('Software', 'Software'), ('Accounting', 'Accounting'), ('HealthCare', 'HealthCare')], max_length=100)),
            ],
            options={
                'verbose_name': 'Industry Type',
            },
        ),
        migrations.CreateModel(
            name='JobDuration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_duration', models.CharField(choices=[('7 Days', '7 Days'), ('15 Days', '15 Days'), ('1 Month', '1 Month')], max_length=125)),
            ],
            options={
                'verbose_name': 'Job Duration',
            },
        ),
        migrations.CreateModel(
            name='JobType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employment', models.CharField(choices=[('Part Time', 'Part Time'), ('Full Time', 'Full Time')], max_length=255)),
            ],
            options={
                'verbose_name': 'Job Type',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(choices=[('USA', 'USA'), ('Canada', 'Canada'), ('Mexico', 'Mexico'), ('France', 'France'), ('Germany', 'Germany')], max_length=255)),
            ],
            options={
                'verbose_name': 'Location',
            },
        ),
        migrations.CreateModel(
            name='OnJobSuccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('success', models.CharField(choices=[('Direct Hiring', 'Direct Hiring'), ('Contract', 'Contract')], max_length=100)),
            ],
            options={
                'verbose_name': 'On Success',
                'verbose_name_plural': 'On Success',
            },
        ),
        migrations.CreateModel(
            name='ProfileType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_type', models.CharField(choices=[('JobSeeker', 'JobSeeker'), ('Employee', 'Employee')], max_length=122)),
            ],
            options={
                'verbose_name': 'Profile Type',
            },
        ),
        migrations.CreateModel(
            name='QuestionAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255, verbose_name='Question')),
                ('answer', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('qa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questionAnswer', to='web.Help')),
            ],
            options={
                'verbose_name': 'Question & Answer',
                'verbose_name_plural': 'Questions & Answers',
            },
        ),
        migrations.CreateModel(
            name='Queue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('blueprint', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='blueprint_name', to='web.Blueprint')),
            ],
            options={
                'verbose_name': 'Queue',
            },
        ),
        migrations.CreateModel(
            name='QueueStack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('candidate_status', models.CharField(blank=True, choices=[('Active', 'Active'), ('Hired', 'Hired'), ('Available', 'Available')], max_length=255)),
                ('candidate_position', models.IntegerField(default=0)),
                ('candidate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='candidate_name', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SalaryRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sal_range', models.CharField(choices=[('$10K-$50K', '$10K-$50K'), ('$50K-$100K', '$50K-$100K'), ('$100K-$200K', '$100K-$200K'), ('$200K-$500K', '$200K-$500K')], max_length=100)),
            ],
            options={
                'verbose_name': 'Salary Range',
            },
        ),
        migrations.CreateModel(
            name='TestPilots',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=255, unique=True)),
                ('name', models.CharField(blank=True, max_length=64)),
            ],
            options={
                'verbose_name': 'Test Pilot',
            },
        ),
        migrations.CreateModel(
            name='Visa',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visa', models.CharField(choices=[('H1B Visa', 'H1B Visa'), ('Work Visa', 'Work Visa')], max_length=255)),
            ],
            options={
                'verbose_name': 'Visa Statu',
            },
        ),
        migrations.CreateModel(
            name='WaitInterval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response_time', models.CharField(choices=[('Within 7 Days', 'Within 7 Days'), ('Within 15 Days', 'Within 15 Days'), ('Within Month', 'Within Month')], max_length=150)),
            ],
            options={
                'verbose_name': 'Wait Interval',
            },
        ),
        migrations.CreateModel(
            name='WorkEnviorment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', django_resized.forms.ResizedImageField(upload_to='img/work-enviorment/temp/')),
                ('session', models.CharField(max_length=511)),
            ],
            options={
                'verbose_name': 'Work Environment',
            },
        ),
        migrations.AddField(
            model_name='queue',
            name='stack',
            field=models.ManyToManyField(related_name='queue_stack', to='web.QueueStack'),
        ),
        migrations.AddField(
            model_name='blueprinttasks',
            name='desired_employee',
            field=models.ManyToManyField(blank=True, related_name='desired_employees', to='web.DesiredEmployee'),
        ),
        migrations.AddField(
            model_name='blueprint',
            name='related_company_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_type', to='web.CompanyType'),
        ),
        migrations.AddField(
            model_name='blueprint',
            name='related_experience',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experience', to='web.ExperienceLevel'),
        ),
        migrations.AddField(
            model_name='blueprint',
            name='related_industry',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='industry', to='web.Industry'),
        ),
        migrations.AddField(
            model_name='blueprint',
            name='related_job_duration',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duration', to='web.JobDuration'),
        ),
        migrations.AddField(
            model_name='blueprint',
            name='related_job_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_type', to='web.JobType'),
        ),
        migrations.AddField(
            model_name='blueprint',
            name='related_location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_location', to='web.Location'),
        ),
        migrations.AddField(
            model_name='blueprint',
            name='related_on_success',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='on_success', to='web.OnJobSuccess'),
        ),
        migrations.AddField(
            model_name='blueprint',
            name='related_salary',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='salary_range', to='web.SalaryRange'),
        ),
        migrations.AddField(
            model_name='blueprint',
            name='related_tasks',
            field=models.ManyToManyField(blank=True, related_name='blueprint_tasks', to='web.BlueprintTasks'),
        ),
        migrations.AddField(
            model_name='blueprint',
            name='related_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='blueprint_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='blueprint',
            name='related_visa_status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visa_status', to='web.Visa'),
        ),
        migrations.AddField(
            model_name='blueprint',
            name='related_wait_interval',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wait_interval', to='web.WaitInterval'),
        ),
    ]
