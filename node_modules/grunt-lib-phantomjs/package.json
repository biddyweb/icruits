{
  "_args": [
    [
      {
        "raw": "grunt-lib-phantomjs@0.3.0",
        "scope": null,
        "escapedName": "grunt-lib-phantomjs",
        "name": "grunt-lib-phantomjs",
        "rawSpec": "0.3.0",
        "spec": "0.3.0",
        "type": "version"
      },
      "/home/einjel/Desktop/iCruits/websource/node_modules/grunt-html-snapshot"
    ]
  ],
  "_from": "grunt-lib-phantomjs@0.3.0",
  "_id": "grunt-lib-phantomjs@0.3.0",
  "_inCache": true,
  "_location": "/grunt-lib-phantomjs",
  "_npmUser": {
    "name": "jsoverson",
    "email": "jsoverson@gmail.com"
  },
  "_npmVersion": "1.2.14",
  "_phantomChildren": {},
  "_requested": {
    "raw": "grunt-lib-phantomjs@0.3.0",
    "scope": null,
    "escapedName": "grunt-lib-phantomjs",
    "name": "grunt-lib-phantomjs",
    "rawSpec": "0.3.0",
    "spec": "0.3.0",
    "type": "version"
  },
  "_requiredBy": [
    "/grunt-html-snapshot"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-lib-phantomjs/-/grunt-lib-phantomjs-0.3.0.tgz",
  "_shasum": "948c6b63017f6ae02351c450a23070190d0306a8",
  "_shrinkwrap": null,
  "_spec": "grunt-lib-phantomjs@0.3.0",
  "_where": "/home/einjel/Desktop/iCruits/websource/node_modules/grunt-html-snapshot",
  "author": {
    "name": "Grunt Team",
    "url": "http://gruntjs.com/"
  },
  "bugs": {
    "url": "https://github.com/gruntjs/grunt-lib-phantomjs/issues"
  },
  "dependencies": {
    "eventemitter2": "~0.4.9",
    "phantomjs": "~1.9.0-1",
    "semver": "~1.0.14",
    "temporary": "~0.0.4"
  },
  "description": "Grunt and PhantomJS, sitting in a tree.",
  "devDependencies": {
    "difflet": "~0.2.3",
    "grunt": "~0.4.0",
    "grunt-contrib-jshint": "~0.1.1"
  },
  "directories": {},
  "dist": {
    "shasum": "948c6b63017f6ae02351c450a23070190d0306a8",
    "tarball": "https://registry.npmjs.org/grunt-lib-phantomjs/-/grunt-lib-phantomjs-0.3.0.tgz"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "homepage": "http://github.com/gruntjs/grunt-lib-phantomjs",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/gruntjs/grunt-lib-phantomjs/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/phantomjs",
  "maintainers": [
    {
      "name": "cowboy",
      "email": "cowboy@rj3.net"
    },
    {
      "name": "jsoverson",
      "email": "jsoverson@gmail.com"
    },
    {
      "name": "tkellen",
      "email": "tyler@sleekcode.net"
    }
  ],
  "name": "grunt-lib-phantomjs",
  "optionalDependencies": {},
  "readme": "# grunt-lib-phantomjs\n\n> Grunt and PhantomJS, sitting in a tree.\n\n## Usage\n\nThe best way to understand how this lib should be used is by looking at the [grunt-contrib-qunit](https://github.com/gruntjs/grunt-contrib-qunit) plugin. Mainly, look at how [the lib is required](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/tasks/qunit.js#L17), how [event handlers are bound](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/tasks/qunit.js#L51-L128) and how [PhantomJS is actually spawned](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/tasks/qunit.js#L160-L173).\n\nAlso, in the case of the grunt-contrib-qunit plugin, it's important to know that the page being loaded into PhantomJS *doesn't* know it will be loaded into PhantomJS, and as such doesn't have any PhantomJS->Grunt code in it. That communication code, aka. the [\"bridge\"](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/phantomjs/bridge.js), is dynamically [injected into the html page](https://github.com/gruntjs/grunt-contrib-qunit/blob/master/tasks/qunit.js#L136).\n\n## An inline example\n\nIf a Grunt task looked something like this:\n\n```js\ngrunt.registerTask('mytask', 'Integrate with phantomjs.', function() {\n  var phantomjs = require('grunt-lib-phantomjs').init(grunt);\n  var errorCount = 0;\n\n  // Handle any number of namespaced events like so.\n  phantomjs.on('mytask.ok', function(msg) {\n    grunt.log.writeln(msg);\n  });\n\n  phantomjs.on('mytask.error', function(msg) {\n    errorCount++;\n    grunt.log.error(msg);\n  });\n\n  // Create some kind of \"all done\" event.\n  phantomjs.on('mytask.done', function() {\n    phantomjs.halt();\n  });\n\n  // Built-in error handlers.\n  phantomjs.on('fail.load', function(url) {\n    phantomjs.halt();\n    grunt.warn('PhantomJS unable to load URL.');\n  });\n\n  phantomjs.on('fail.timeout', function() {\n    phantomjs.halt();\n    grunt.warn('PhantomJS timed out.');\n  });\n\n  // This task is async.\n  var done = this.async();\n\n  // Spawn phantomjs\n  phantomjs.spawn('test.html', {\n    // Additional PhantomJS options.\n    options: {},\n    // Complete the task when done.\n    done: function(err) {\n      done(err || errorCount === 0);\n    }\n  });\n\n});\n```\n\nAnd `test.html` looked something like this (note the \"bridge\" is hard-coded into this page and not injected):\n\n```html\n<!doctype html>\n<html>\n<head>\n<script>\n\n// Send messages to the parent PhantomJS process via alert! Good times!!\nfunction sendMessage() {\n  var args = [].slice.call(arguments);\n  alert(JSON.stringify(args));\n}\n\nsendMessage('mytask.ok', 'Something worked.');\nsendMessage('mytask.error', 'Something failed.');\nsendMessage('mytask.done');\n\n</script>\n</head>\n<body>\n</body>\n</html>\n```\n\nThen running Grunt would behave something like this:\n\n```shell\n$ grunt mytask\nRunning \"mytask\" task\nSomething worked.\n>> Something failed.\nWarning: Task \"mytask\" failed. Use --force to continue.\n\nAborted due to warnings.\n```\n\n## Release History\n\n* 2013-02-28 - v0.3.0 - Use PhantomJS 1.9.0-1.\n* 2013-02-28 - v0.2.0 - Use PhantomJS 1.8.1.\n* 2012-12-21 - v0.1.0 - Use PhantomJS 1.7.0.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/gruntjs/grunt-lib-phantomjs.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "0.3.0"
}
